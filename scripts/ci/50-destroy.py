#!/usr/bin/env python3
import subprocess, os, sys
from pathlib import Path

# –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
ROOT = Path(__file__).resolve().parent.parent.parent
sys.path.insert(0, str(ROOT / "scripts" / "ci"))

# –ò–º–ø–æ—Ä—Ç –∏–∑ —Ç–≤–æ–µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ discover_services.py
from discover_services import find_project_root, find_matching_services, build_group_name

def main():
    os.chdir(find_project_root())

    env = os.getenv("ENV")
    app = os.getenv("APP")
    service = os.getenv("SERVICE")

    if not env:
        print("‚ùå ENV is required (e.g. ENV=dev or ENV=prod)")
        sys.exit(1)

    # Working dir = –ø—É—Ç—å –¥–æ env
    working_dir = ROOT / "infrastructure" / env

    # include_dir —Å—Ç—Ä–æ–∏–º –ø–æ app –∏ service
    if app and service:
        include_dir = f"vpc/{app}/{service}"
    elif app:
        include_dir = f"vpc/{app}"
    else:
        include_dir = None

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É
    matches = find_matching_services(env, app, service)
    
    if not matches:
        print("‚ö†Ô∏è No matching services found for destroy.")
        sys.exit(0)

    print("üì¶ Matched groups:")
    for m in matches:
        print(f" - {build_group_name(m['env'], m['app'], m['service'])}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    cmd = ["terragrunt", "destroy", "--all", "--non-interactive", "-lock=false", "-auto-approve"]
    if include_dir:
        cmd += ["--queue-include-dir", include_dir]
    cmd += ["--working-dir", str(working_dir)]

    print(f"\nüí• Running: {' '.join(cmd)}")
    try:
        subprocess.run(cmd, check=True)
    except subprocess.CalledProcessError as err:
        print("‚ùå Terragrunt destroy failed.")
        print(err)
        sys.exit(err.returncode)

if __name__ == "__main__":
    main()
