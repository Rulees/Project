# bot_scripts/handlers.py
import os
import asyncio
from random import choice
from datetime import datetime, timedelta

import aiosqlite
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from aiogram.fsm.context import FSMContext

from bot_scripts import keyboards as kb
from bot_scripts import inlines as inl
from bot_scripts.phrases import loading
from bot_scripts.states import Booking, Idis, AdminPanel
from bot_scripts.btn_functions import (
    create_time, create_dates, generate_times,
    TABLES, create_tables_keyboard, create_admin_dates
)
from bot_scripts.db import save_booking, get_booked_tables, db_fetchall, db_execute
import dotenv

dotenv.load_dotenv()
router = Router()
DB_NAME = "bookings.db"
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))
ADMIN_MENU = int(os.getenv("ADMIN_MENU", "0"))

# ¬´–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å¬ª
admin_back = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
])

################
# –°—Ç–∞—Ä—Ç –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
################

@router.message(Command('start'))
@router.message(Command('start'))
async def start_command(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–µ—Ä–≤–æ–µ
    prev_message_id = (await state.get_data()).get('mess_id')
    if prev_message_id:
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.bot.delete_message(message.chat.id, prev_message_id)
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await state.set_state(Idis.mess_id)
    if message.chat.type == 'private':
        sent = await message.reply(
            'üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Totem Lounge! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=kb.main_menu
        )
        await state.update_data(mess_id=sent.message_id)
    else:
        await message.reply('–ù–µ –ª–µ–∑—å ü§¨')

@router.message(Command('info'))
async def info_command(message: Message):
    if message.chat.type == 'private':
        await message.answer('‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n')
    else:
        await message.answer('–Ω–µ –ª–µ–∑—å ü§¨')

@router.message(F.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
async def contacts(message: Message):
    await message.reply(
        "üì± WhatsApp: [–ü–µ—Ä–µ–π—Ç–∏](https://wa.me/79139598888)\n"
        "üì¢ –ö–∞–Ω–∞–ª: [–ü–µ—Ä–µ–π—Ç–∏](https://t.me/Totemhookahbar)\n"
        "üåé –°–∞–π—Ç: [–ü–µ—Ä–µ–π—Ç–∏](https://totemlounge.ru/)\n"
        "üì∑ Instagram: [–ü–µ—Ä–µ–π—Ç–∏](https://www.instagram.com/totem.hookah.bar)",
        disable_web_page_preview=True,
        parse_mode='Markdown'
    )

@router.message(F.text == 'üçΩ –ú–µ–Ω—é')
async def show_menu(message: Message, state: FSMContext):
    data = await state.get_data()
    prev = data.get('mess_id')
    if prev:
        await message.bot.delete_message(message.chat.id, prev)
    sent = await message.answer('üéÅ –ù–∞—à–µ –º–µ–Ω—é:', reply_markup=inl.menu_site)
    await state.update_data(mess_id=sent.message_id)

@router.message(F.text == 'üíé –õ–æ—è–ª—å–Ω–æ—Å—Ç—å')
async def send_loyalty(message: Message, state: FSMContext):
    data = await state.get_data()
    prev = data.get('mess_id')
    if prev:
        await message.bot.delete_message(message.chat.id, prev)
    sent = await message.answer('üéÅ –ù–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:', reply_markup=inl.loyalty_bot)
    await state.update_data(mess_id=sent.message_id)

@router.callback_query(F.data == 'back')
async def back_to_main(query: CallbackQuery, state: FSMContext):
    await query.answer()
    data = await state.get_data()
    prev_message_id = data.get('mess_id')
    if prev_message_id:
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.bot.delete_message(query.message.chat.id, prev_message_id)
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    sent = await query.message.answer(choice(loading))
    await asyncio.sleep(0.5)
    await query.bot.delete_message(sent.chat.id, sent.message_id)

    menu = await query.message.answer('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=kb.main_menu)
    await state.update_data(mess_id=menu.message_id)

#############################
# –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #
#############################

@router.message(F.text == 'üïí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å')
async def bron(message: Message, state: FSMContext):
    sent = await message.answer(choice(loading))
    await asyncio.sleep(0.5)
    await message.bot.delete_message(sent.chat.id, sent.message_id)
    prev = (await state.get_data()).get('mess_id')
    if prev:
        await message.bot.delete_message(message.chat.id, prev)
    await state.set_state(Booking.guest_counter)
    sent = await message.answer('üë• –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π:', reply_markup=inl.countrilka)
    await state.update_data(mess_id=sent.message_id)

@router.callback_query(F.data.in_([str(i) for i in range(1, 13)]))
async def guest_count(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.delete()
    sent = await query.message.answer(choice(loading))
    await asyncio.sleep(0.5)
    await query.bot.delete_message(sent.chat.id, sent.message_id)
    await state.update_data(guest_count=int(query.data))
    sent = await query.message.answer('üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:', reply_markup=create_dates())
    await state.update_data(mess_id=sent.message_id)
    await state.set_state(Booking.guest_date)

@router.callback_query(F.data.startswith(('weekday_', 'weekend_')))
async def user_date_choice(query: CallbackQuery, state: FSMContext):
    if await state.get_state() != Booking.guest_date.state:
        return
    await query.answer()
    await query.message.delete()
    sent = await query.message.answer(choice(loading))
    await asyncio.sleep(0.5)
    await query.bot.delete_message(sent.chat.id, sent.message_id)
    date = query.data.split('_', 1)[1]
    await state.update_data(guest_date=date)
    is_weekend = query.data.startswith('weekend_')
    sent = await query.message.answer("üï∞ –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–π—Ç–∏?", reply_markup=create_time(is_weekend))
    await state.update_data(mess_id=sent.message_id)
    await state.set_state(Booking.guest_time)

@router.callback_query(F.data.startswith('time_') & ~F.data.contains(':'))
async def time_range_choice(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.delete()
    sent = await query.message.answer(choice(loading))
    await asyncio.sleep(0.5)
    await query.bot.delete_message(sent.chat.id, sent.message_id)
    rng = query.data.removeprefix('time_')
    await state.update_data(time_range=rng)
    if rng == 'morning':
        markup = generate_times("10:00", "12:00")
    elif rng == 'afternoon':
        markup = generate_times("13:00", "16:00")
    elif rng == 'evening':
        markup = generate_times("17:00", "21:00")
    elif rng == 'night':
        markup = generate_times("22:00", "00:00")
    else:
        markup = generate_times("22:00", "02:00")
    sent = await query.message.answer("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=markup)
    await state.update_data(mess_id=sent.message_id)
    await state.set_state(Booking.exact_time)

@router.callback_query(F.data.startswith('time_') & F.data.contains(':'))
async def exact_time_choice(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.delete()
    selected = query.data.split('_', 1)[1]
    await state.update_data(exact_time=selected)

    data = await state.get_data()
    guest_date = data['guest_date']
    guest_count = data['guest_count']

    sent = await query.message.answer(choice(loading))
    await asyncio.sleep(0.5)
    await query.bot.delete_message(sent.chat.id, sent.message_id)

    booked = await get_booked_tables(guest_date, selected)
    avail = [
        (tn, desc, (min_g, max_g))
        for tn, (desc, (min_g, max_g)) in TABLES.items()
        if tn not in booked and min_g <= guest_count <= max_g
    ]

    if not avail:
        await query.message.answer(
            "üòî –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard =[ [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_in_booking")
            ]])
        )
        return

    sent = await query.message.answer("ü™ë –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–∏–∫:", reply_markup=create_tables_keyboard(avail))
    await state.update_data(mess_id=sent.message_id)
    await state.set_state(Booking.guest_table)

@router.callback_query(F.data == 'table_auto')
async def auto_select_table(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.delete()
    data = await state.get_data()
    booked = await get_booked_tables(data['guest_date'], data['exact_time'])
    guest_count = data['guest_count']

    candidates = [
        (tn, desc, min_g, max_g)
        for tn, (desc, (min_g, max_g)) in TABLES.items()
        if tn not in booked and min_g <= guest_count <= max_g
    ]

    if not candidates:
        await query.message.answer(
            "üòî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–æ–ª–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_in_booking")]]))
        return

    tn, desc, min_g, max_g = sorted(candidates, key=lambda x: (x[2], x[3]))[0]
    await state.update_data(guest_table=tn)
    await query.message.answer(
        f"ü§ñ –ü—Ä–µ–¥–ª–∞–≥–∞—é —Å—Ç–æ–ª {tn}: {desc} ({min_g}-{max_g} —á–µ–ª.)\n–ü–æ–¥—Ö–æ–¥–∏—Ç?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="table_confirm")],
            [InlineKeyboardButton(text="‚ùå –í—Ä—É—á–Ω—É—é", callback_data="table_manual")]
        ])
    )

@router.callback_query(F.data == 'table_confirm')
async def confirm_auto_table(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.delete()
    sent = await query.message.answer("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb.phone_request)
    await state.update_data(mess_id=sent.message_id)
    await state.set_state(Booking.guest_phone)

@router.callback_query(F.data == 'table_manual')
async def manual_table_select(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.delete()
    data = await state.get_data()
    booked = await get_booked_tables(data['guest_date'], data['exact_time'])
    avail = [
        (tn, desc, (min_g, max_g))
        for tn, (desc, (min_g, max_g)) in TABLES.items()
        if tn not in booked and min_g <= data['guest_count'] <= max_g
    ]
    sent = await query.message.answer("ü™ë –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–∏–∫:", reply_markup=create_tables_keyboard(avail))
    await state.update_data(mess_id=sent.message_id)
    await state.set_state(Booking.guest_table)

@router.callback_query(F.data.startswith('table_'))
async def table_choice(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.delete()
    num = int(query.data.split('_', 1)[1])
    await state.update_data(guest_table=num)
    sent = await query.message.answer(choice(loading))
    await asyncio.sleep(0.5)
    await query.bot.delete_message(sent.chat.id, sent.message_id)
    sent = await query.message.answer('üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', reply_markup=kb.phone_request)
    await state.update_data(mess_id=sent.message_id)
    await state.set_state(Booking.guest_phone)

@router.message(F.contact)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(guest_phone=message.contact.phone_number)
    sent = await message.answer('üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    await state.update_data(mess_id=sent.message_id)
    await state.set_state(Booking.guest_name)

@router.message(Booking.guest_name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(guest_name=message.text.strip())
    kb_comment = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å", callback_data="add_comment"),
            InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_in_booking")]
    ])
    sent = await message.answer('–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?', reply_markup=kb_comment)
    await state.update_data(mess_id=sent.message_id)
    await state.set_state(Booking.comment_decision)

@router.callback_query(F.data == "add_comment")
async def add_comment(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.delete()
    sent = await query.message.answer(choice(loading))
    await asyncio.sleep(0.5)
    await query.bot.delete_message(sent.chat.id, sent.message_id)
    sent = await query.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    await state.update_data(mess_id=sent.message_id)
    await state.set_state(Booking.guest_comment)

@router.callback_query(F.data == "skip_comment")
async def skip_comment(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.delete()
    data = await state.get_data()
    await finish_booking(query.message, data, comment=None)
    await state.clear()

@router.message(Booking.guest_comment)
async def save_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    await finish_booking(message, data, comment=message.text.strip())
    await state.clear()

async def finish_booking(message, booking_data, comment=None):
    await save_booking(
        date=booking_data['guest_date'],
        time=booking_data['exact_time'],
        guest_count=booking_data['guest_count'],
        table_number=booking_data['guest_table'],
        phone_number=booking_data['guest_phone'],
        guest_name=booking_data['guest_name'],
        comment=comment,
        duration=2
    )
    from datetime import timedelta

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º exact_time –≤ datetime, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    if isinstance(booking_data['exact_time'], str):
        booking_data['exact_time'] = datetime.strptime(booking_data['exact_time'], '%H:%M')

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_text = (
        f"üì£ <b>–ù–æ–≤–∞—è –±—Ä–æ–Ω—å</b>\n"
        f"üë• {booking_data['guest_count']} –≥–æ—Å—Ç–µ–π\n"
        f"üìÖ {booking_data['guest_date']}\n"
        f"üï∞ {booking_data['exact_time'].strftime('%H:%M')} - {(booking_data['exact_time'] + timedelta(hours=2)).strftime('%H:%M')}\n"
        f"ü™ë –°—Ç–æ–ª {booking_data['guest_table']}\n"
        f"üì± {booking_data['guest_phone']}\n"
        f"üë§ {booking_data['guest_name']}\n"
    )

    if comment:
        admin_text += f"üìù {comment}\n"

    await message.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_text, parse_mode="HTML")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_text = (
        "‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
        f"üë• {booking_data['guest_count']} –≥–æ—Å—Ç–µ–π\n"
        f"üìÖ {booking_data['guest_date']}\n"
        f"üï∞ {booking_data['exact_time'].strftime('%H:%M')} - {(booking_data['exact_time'] + timedelta(hours=2)).strftime('%H:%M')}\n"
        f"ü™ë –°—Ç–æ–ª {booking_data['guest_table']}\n"
        f"üì± {booking_data['guest_phone']}\n"
        f"üë§ {booking_data['guest_name']}\n"
    )
    if comment:
        user_text += f"üìù {comment}\n"
    user_text += "\nüíå –ë—Ä–æ–Ω—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è 15 –º–∏–Ω—É—Ç.\n‚ùó–°–æ–æ–±—â–∏—Ç–µ –æ–± –æ—Ç–º–µ–Ω–µ –∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫–µ!"
    await message.answer(user_text, reply_markup=kb.main_menu)
# ===============================
# üîí –ê–î–ú–ò–ù–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨
# ===============================

@router.message(Command('admin'))
async def open_admin_panel(message: Message, state: FSMContext):
    if message.chat.id == ADMIN_MENU:
        await state.set_state(AdminPanel.choosing_action)
        await message.answer("üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞:", reply_markup=inl.admin_menu)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")


@router.callback_query(F.data == "admin_back", F.message.chat.id == ADMIN_MENU)
async def back_to_admin_panel(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await state.set_state(AdminPanel.choosing_action)
    await query.message.edit_text("üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=inl.admin_menu)


@router.callback_query(F.data == "admin_close", F.message.chat.id == ADMIN_MENU)
async def close_admin_panel(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.delete()
    await query.message.answer("üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.")
    await state.clear()

# ===== –ù–æ–≤–∞—è –±—Ä–æ–Ω—å =====

@router.callback_query(F.data == "admin_new", F.message.chat.id == ADMIN_MENU)
async def admin_new_start(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.edit_text("üÜï –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=admin_back)
    await state.set_state(AdminPanel.new_name)

@router.message(AdminPanel.new_name, F.chat.id == ADMIN_MENU)
async def admin_new_name(message: Message, state: FSMContext):
    if not message.text:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", reply_markup=admin_back)
    await state.update_data(new_name=message.text.strip())
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞:", reply_markup=admin_back)
    await state.set_state(AdminPanel.new_table)


@router.callback_query(F.data == "back_in_booking")
async def back_in_booking_process(query: CallbackQuery, state: FSMContext):
    await query.answer()
    current_state = await state.get_state()

    await query.message.delete()

    if current_state == Booking.guest_table.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
        data = await state.get_data()
        is_weekend = "weekend_" in data['guest_date']
        sent = await query.message.answer(
            "üï∞ –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–π—Ç–∏?",
            reply_markup=create_time(is_weekend)
        )
        await state.update_data(mess_id=sent.message_id)
        await state.set_state(Booking.guest_time)

    elif current_state == Booking.exact_time.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏
        data = await state.get_data()
        is_weekend = "weekend_" in data['guest_date']
        sent = await query.message.answer(
            "üï∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:",
            reply_markup=create_time(is_weekend)
        )
        await state.update_data(mess_id=sent.message_id)
        await state.set_state(Booking.guest_time)

    elif current_state == Booking.guest_time.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        sent = await query.message.answer(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=create_dates()
        )
        await state.update_data(mess_id=sent.message_id)
        await state.set_state(Booking.guest_date)

    elif current_state == Booking.guest_date.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π
        sent = await query.message.answer(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π:",
            reply_markup=inl.countrilka
        )
        await state.update_data(mess_id=sent.message_id)
        await state.set_state(Booking.guest_counter)

    elif current_state == Booking.guest_counter.state:
        # –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        sent = await query.message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=kb.main_menu
        )
        await state.update_data(mess_id=sent.message_id)

    elif current_state == Booking.comment_decision.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
        sent = await query.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.update_data(mess_id=sent.message_id)
        await state.set_state(Booking.guest_name)

    else:
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        await state.clear()
        await query.message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=kb.main_menu
        )

@router.message(AdminPanel.new_table, F.chat.id == ADMIN_MENU)
async def admin_new_table(message: Message, state: FSMContext):
    if not message.text or not message.text.strip().isdigit():
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞ —Ü–∏—Ñ—Ä–∞–º–∏.", reply_markup=admin_back)
    await state.update_data(new_table=int(message.text.strip()))
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏ (YYYY-MM-DD):", reply_markup=admin_back)
    await state.set_state(AdminPanel.new_date)

@router.message(AdminPanel.new_date, F.chat.id == ADMIN_MENU)
async def admin_new_date(message: Message, state: FSMContext):
    try:
        chosen_date = datetime.strptime(message.text.strip(), "%Y-%m-%d").date()
        if chosen_date > datetime.now().date() + timedelta(days=30):
            return await message.answer("‚ùå –ú–æ–∂–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π.", reply_markup=admin_back)
    except ValueError:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.", reply_markup=admin_back)

    await state.update_data(new_date=message.text.strip())
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏ (HH:MM):", reply_markup=admin_back)
    await state.set_state(AdminPanel.new_time)

@router.message(AdminPanel.new_time, F.chat.id == ADMIN_MENU)
async def admin_new_time(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text.strip(), "%H:%M")
    except ValueError:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:30).", reply_markup=admin_back)

    await state.update_data(new_time=message.text.strip())
    await message.answer("–°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π –±—É–¥–µ—Ç?", reply_markup=admin_back)
    await state.set_state(AdminPanel.new_guests)

@router.message(AdminPanel.new_guests, F.chat.id == ADMIN_MENU)
async def admin_new_guests(message: Message, state: FSMContext):
    if not message.text or not message.text.strip().isdigit():
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π —Ü–∏—Ñ—Ä–∞–º–∏.", reply_markup=admin_back)
    await state.update_data(new_guest_count=int(message.text.strip()))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=admin_back)
    await state.set_state(AdminPanel.new_phone)

@router.message(AdminPanel.new_phone, F.chat.id == ADMIN_MENU)
async def admin_new_phone(message: Message, state: FSMContext):
    if not message.text:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=admin_back)
    data = await state.get_data()
    await admin_save_booking(data, message.text)
    await message.answer("‚úÖ –ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
    await message.answer("üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=inl.admin_menu)
    await state.set_state(AdminPanel.choosing_action)

# ===== –¢–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏ =====

@router.callback_query(F.data == "admin_current", F.message.chat.id == ADMIN_MENU)
async def admin_current_start(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=create_admin_dates())
    await state.set_state(AdminPanel.current_date)

@router.callback_query(AdminPanel.current_date, F.data.startswith('admin_date_'))
async def admin_current_date_choice(query: CallbackQuery, state: FSMContext):
    await query.answer()
    date = query.data.split('_')[2]
    await state.update_data(current_date=date)

    rows = await db_fetchall(
        "SELECT id, time, duration, guest_name, table_number FROM bookings WHERE date=? ORDER BY time",
        (date,)
    )

    if not rows:
        await query.message.edit_text(f"‚ùå –ù–µ—Ç –±—Ä–æ–Ω–µ–π –Ω–∞ {date}.", reply_markup=admin_back)
    else:
        text = f"üìã –ë—Ä–æ–Ω–∏ –Ω–∞ {date}:\n\n"
        text += "ID ‚Äî –í—Ä–µ–º—è ‚Äî –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî –ò–º—è ‚Äî –°—Ç–æ–ª\n"
        text += "\n".join(f"{r[0]} ‚Äî {r[1]} ‚Äî {r[2]}—á ‚Äî {r[3]} ‚Äî –°—Ç–æ–ª {r[4]}" for r in rows)
        await query.message.edit_text(text)

    await state.set_state(AdminPanel.choosing_action)
    await query.message.answer("üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=inl.admin_menu)

# ===== –£–¥–∞–ª–µ–Ω–∏–µ =====

@router.callback_query(F.data == "admin_remove", F.message.chat.id == ADMIN_MENU)
async def admin_remove_start(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.edit_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=create_admin_dates())
    await state.set_state(AdminPanel.remove_date)

@router.callback_query(AdminPanel.remove_date, F.data.startswith('admin_date_'))
async def admin_remove_date_choice(query: CallbackQuery, state: FSMContext):
    await query.answer()
    date = query.data.split('_')[2]
    await state.update_data(remove_date=date)
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞:", reply_markup=admin_back)
    await state.set_state(AdminPanel.remove_table)

# ===== –ü—Ä–æ–¥–ª–µ–Ω–∏–µ =====

@router.callback_query(F.data == "admin_extend", F.message.chat.id == ADMIN_MENU)
async def admin_extend_start(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.edit_text("‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:", reply_markup=create_admin_dates())
    await state.set_state(AdminPanel.extend_date)

@router.callback_query(AdminPanel.extend_date, F.data.startswith('admin_date_'))
async def admin_extend_date_choice(query: CallbackQuery, state: FSMContext):
    await query.answer()
    date = query.data.split('_')[2]
    await state.update_data(extend_date=date)
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞:", reply_markup=admin_back)
    await state.set_state(AdminPanel.extend_table)



@router.message(AdminPanel.current_table, F.chat.id == ADMIN_MENU)
async def admin_current_table(message: Message, state: FSMContext):
    if not message.text or not message.text.strip().isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞ —Ü–∏—Ñ—Ä–∞–º–∏.", reply_markup=admin_back)
        return
    table_no = int(message.text.strip())
    data = await state.get_data()
    rows = await db_fetchall(
        "SELECT id, time, duration, guest_name FROM bookings WHERE date=? AND table_number=? ORDER BY time",
        (data['current_date'], table_no)
    )
    if not rows:
        await message.answer("‚ùå –ù–µ—Ç –±—Ä–æ–Ω–µ–π.", reply_markup=admin_back)
    else:
        text = "ID ‚Äî –í—Ä–µ–º—è ‚Äî –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî –ò–º—è\n" + "\n\n".join(f"{r[0]} ‚Äî {r[1]} ‚Äî {r[2]}—á ‚Äî {r[3]}" for r in rows)
        await message.answer(text)
    await message.answer("üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=inl.admin_menu)
    await state.set_state(AdminPanel.choosing_action)

@router.message(AdminPanel.remove_date, F.chat.id == ADMIN_MENU)
async def admin_remove_date(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É.", reply_markup=admin_back)
        return
    await state.update_data(remove_date=message.text.strip())
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞:", reply_markup=admin_back)
    await state.set_state(AdminPanel.remove_table)

@router.message(AdminPanel.remove_table, F.chat.id == ADMIN_MENU)
async def admin_remove_table(message: Message, state: FSMContext):
    if not message.text or not message.text.strip().isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞ —Ü–∏—Ñ—Ä–∞–º–∏.", reply_markup=admin_back)
        return
    await state.update_data(remove_table=int(message.text.strip()))
    data = await state.get_data()
    rows = await db_fetchall(
        "SELECT id, time, guest_name FROM bookings WHERE date=? AND table_number=? ORDER BY time",
        (data['remove_date'], data['remove_table'])
    )
    if not rows:
        await message.answer("‚ùå –ù–µ—Ç –±—Ä–æ–Ω–µ–π.", reply_markup=admin_back)
    else:
        text = "ID ‚Äî –í—Ä–µ–º—è ‚Äî –ò–º—è\n" + "\n".join(f"{r[0]} ‚Äî {r[1]} ‚Äî {r[2]}" for r in rows)
        await message.answer(text + "\n\n–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=admin_back)
    await state.set_state(AdminPanel.remove_choose_id)

@router.message(AdminPanel.remove_choose_id, F.chat.id == ADMIN_MENU)
async def admin_remove_confirm(message: Message, state: FSMContext):
    if not message.text or not message.text.strip().isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ ID —Ü–∏—Ñ—Ä–∞–º–∏.", reply_markup=admin_back)
        return
    bid = int(message.text.strip())
    await db_execute("DELETE FROM bookings WHERE id=?", (bid,))
    await message.answer(f"‚úÖ –ë—Ä–æ–Ω—å ID {bid} —É–¥–∞–ª–µ–Ω–∞.")
    await message.answer("üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=inl.admin_menu)
    await state.set_state(AdminPanel.choosing_action)


@router.message(AdminPanel.extend_date, F.chat.id == ADMIN_MENU)
async def admin_extend_date(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É.", reply_markup=admin_back)
        return
    await state.update_data(extend_date=message.text.strip())
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞:", reply_markup=admin_back)
    await state.set_state(AdminPanel.extend_table)

@router.message(AdminPanel.extend_table, F.chat.id == ADMIN_MENU)
async def admin_extend_table(message: Message, state: FSMContext):
    if not message.text or not message.text.strip().isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞ —Ü–∏—Ñ—Ä–∞–º–∏.", reply_markup=admin_back)
        return
    await state.update_data(extend_table=int(message.text.strip()))
    data = await state.get_data()
    rows = await db_fetchall(
        "SELECT id, time, duration, guest_name FROM bookings WHERE date=? AND table_number=? ORDER BY time",
        (data['extend_date'], data['extend_table'])
    )
    if not rows:
        await message.answer("‚ùå –ù–µ—Ç –±—Ä–æ–Ω–µ–π.", reply_markup=admin_back)
    else:
        text = "ID ‚Äî –í—Ä–µ–º—è ‚Äî –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî –ò–º—è\n\n" + "\n".join(f"{r[0]} ‚Äî {r[1]} ‚Äî {r[2]}—á ‚Äî {r[3]}" for r in rows)
        await message.answer(text + "\n\n–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:", reply_markup=admin_back)
    await state.set_state(AdminPanel.extend_choose_id)

@router.message(AdminPanel.extend_choose_id, F.chat.id == ADMIN_MENU)
async def admin_extend_choose(message: Message, state: FSMContext):
    if not message.text or not message.text.strip().isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ ID —Ü–∏—Ñ—Ä–∞–º–∏.", reply_markup=admin_back)
        return
    await state.update_data(extend_id=int(message.text.strip()))
    await message.answer("–ù–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –ø—Ä–æ–¥–ª–∏—Ç—å?", reply_markup=admin_back)
    await state.set_state(AdminPanel.extend_hours)

@router.message(AdminPanel.extend_hours, F.chat.id == ADMIN_MENU)
async def admin_extend_hours(message: Message, state: FSMContext):
    if not message.text or not message.text.strip().isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Ü–∏—Ñ—Ä–∞–º–∏.", reply_markup=admin_back)
        return
    hours = int(message.text.strip())
    data = await state.get_data()
    await db_execute(
        "UPDATE bookings SET duration = duration + ? WHERE id = ?",
        (hours, data['extend_id'])
    )
    await message.answer(f"‚úÖ –ü—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞ {hours} —á.")
    await message.answer("üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=inl.admin_menu)
    await state.set_state(AdminPanel.choosing_action)

async def admin_save_booking(data, phone_number):
    await save_booking(
        date=data['new_date'],
        time=data['new_time'],
        guest_count=data['new_guest_count'],
        table_number=data['new_table'],
        phone_number=phone_number.strip(),
        guest_name=data['new_name'],
        comment=None,
        duration=2,
        by_admin=1
    )

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
async def reminder_task(bot):
    while True:
        now = datetime.now()
        async with aiosqlite.connect(DB_NAME) as db:
            cursor = await db.execute("""
                SELECT id, chat_id, guest_name, date, time
                FROM bookings
                WHERE review_notification_sent = 0
            """)
            bookings = await cursor.fetchall()

        for booking in bookings:
            booking_id, chat_id, guest_name, date_str, time_str = booking

            booking_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
            remind_time = booking_time - timedelta(hours=1)

            if remind_time <= now <= booking_time:
                try:
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ö° –ü—Ä–∏–≤–µ—Ç, {guest_name}!\n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –≤–∞—à–µ–π –±—Ä–æ–Ω–∏ —Å–µ–≥–æ–¥–Ω—è –≤ {time_str}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ!",
                        reply_markup=inl.confirm_booking_keyboard(booking_id)
                    )
                except Exception as e:
                    with open("bot_errors.log", "a", encoding="utf-8") as f:
                        f.write(f"{datetime.now()}: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}\n")

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def send_review_link_task(bot):
    while True:
        now = datetime.now()
        async with aiosqlite.connect(DB_NAME) as db:
            cursor = await db.execute("""
                SELECT id, chat_id, guest_name, date, time, duration, review_notification_sent
                FROM bookings
                WHERE review_notification_sent = 0
            """)
            bookings = await cursor.fetchall()

        for booking in bookings:
            booking_id, chat_id, guest_name, date_str, time_str, duration, review_sent = booking

            booking_start = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
            booking_end = booking_start + timedelta(hours=duration)

            # –ñ–¥—ë–º —á–∞—Å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±—Ä–æ–Ω–∏
            if booking_end - booking_end <= now:
                try:
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚≠ê –°–ø–∞—Å–∏–±–æ, {guest_name}, —á—Ç–æ –±—ã–ª–∏ —É –Ω–∞—Å!\n\n"
                             f"–ï—Å–ª–∏ –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ Totem Lounge: [–û—Ü–µ–Ω–∏—Ç—å –≤ 2–ì–ò–°](https://2gis.ru/novosibirsk/firm/70000001067832773)",
                        parse_mode="Markdown",
                    )

                    # –ü–æ–º–µ—á–∞–µ–º –±—Ä–æ–Ω—å –∫–∞–∫ "–æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
                    async with aiosqlite.connect(DB_NAME) as db:
                        await db.execute(
                            "UPDATE bookings SET review_notification_sent = 1 WHERE id = ?",
                            (booking_id,)
                        )
                        await db.commit()

                except Exception as e:
                    with open("bot_errors.log", "a", encoding="utf-8") as f:
                        f.write(f"{datetime.now()}: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}\n")

        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç




