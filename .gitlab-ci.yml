stages:
  - detect
  - apply_dev
  - deploy_dev
  - approval_gate
  - apply_prod
  - deploy_prod
  - destroy


variables:
  WORK_DIR: "$CI_PROJECT_DIR"
  TF_PLUGIN_CACHE_DIR: "$CI_PROJECT_DIR/plugin-cache"
  TERRAGRUNT_PARALLELISM: 6


cache:
  key: plugin-cache
  paths:
    - plugin-cache/


default:
  image: python:3.11




detect:
  stage: detect
  script:
    - pip install -r requirements.txt || true
    - make detect
  artifacts:
    paths: [changed_services.json]
    expire_in: 1 hour
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH'
    - when: always




apply_dev:
  stage: apply_dev
  image: alpine/terragrunt:tf1.9.4
  script:
    - make apply changed_services.json ENV=dev
  needs: [detect]
  rules:
    - if: '$CI_COMMIT_BRANCH'




deploy_dev:
  stage: deploy_dev
  script:
    - make deploy changed_services.json ENV=dev
  needs: [apply_dev]
  rules:
    - if: '$CI_COMMIT_BRANCH'




check_approval:
  stage: approval_gate
  script:
    - ./scripts/ci/check_approval.sh
  needs: [deploy_dev]
  when: manual
  allow_failure: false
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH'




apply_prod:
  stage: apply_prod
  image: alpine/terragrunt:tf1.9.4
  script:
    - make apply changed_services.json ENV=prod
  needs: [check_approval]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'




deploy_prod:
  stage: deploy_prod
  script:
    - make deploy changed_services.json ENV=prod
  needs: [apply_prod]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'




destroy:
  stage: destroy
  image: alpine/terragrunt:tf1.9.4
  script:
    - make destroy ENV=dev
    - make destroy ENV=prod
  when: manual
  allow_failure: false
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
